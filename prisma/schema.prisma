// This is your Prisma schema file.
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  reviews       Review[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Product model
model Product {
  id          String   @id @default(cuid())
  name        String
  price       Float
  description String    @db.Text
  images      String[]
  category    String
  features    String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  inventory   Int      @default(0)
  isActive    Boolean  @default(true)
  orderItems  OrderItem[]
  reviews     Review[]
}

// Review model
model Review {
  id        String   @id @default(cuid())
  productId String
  userId    String?
  userName  String
  rating    Int
  comment   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
}

// Order models
model Order {
  id          String     @id @default(cuid())
  orderNumber String     @unique
  customerName String
  customerEmail String
  customerPhone String?
  address     String
  city        String
  state       String?
  zipCode     String?
  country     String
  total       Float
  status      OrderStatus @default(PENDING)
  items       OrderItem[]
  payment     Payment?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])
}

model Payment {
  id                String        @id @default(cuid())
  orderId           String        @unique
  bankName          String
  accountNumber     String
  accountName       String
  amount            Float
  referenceCode     String        @unique
  status            PaymentStatus @default(PENDING)
  verificationNote  String?
  createdAt         DateTime      @default(now())
  verifiedAt        DateTime?
  
  order             Order         @relation(fields: [orderId], references: [id])
  logs              PaymentLog[]
  
  @@map("payments")
}

model PaymentLog {
  id        String   @id @default(cuid())
  paymentId String
  action    String
  details   Json?
  createdAt DateTime @default(now())
  
  payment   Payment  @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  
  @@map("payment_logs")
}

// Analytics model
model Analytics {
  id            String   @id @default(cuid())
  date          DateTime @default(now())
  totalSales    Float    @default(0)
  totalOrders   Int      @default(0)
  topCategories Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Enums
enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  VERIFIED
  FAILED
}
